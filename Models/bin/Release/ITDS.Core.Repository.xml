<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ITDS.Core.Repository</name>
    </assembly>
    <members>
        <member name="P:ITDS.Core.Repository.CosmosDb.AbstractCosmosDbEntity.ETag">
            <summary>
            This is to ensure that the ETag from documentDb is deserialized
            when retrieving it, but not serialized when storing it.
            Why?
            Because we do not want to override documentDb's mechanism for
            creating and saving an ETag when saving a document, but we do want
            to have access to it when retrieving the document.
            </summary>       
        </member>
        <member name="T:ITDS.Core.Repository.Helpers.ConcurrencyHelper">
            <summary>
            Auxilliary class to work with Update operations towards cosmos db and storage accounts.
            Ensures update/merge logic is re-performed when retrying an update that failed due to concurrent update of a resource.
            Use to ensures Optimistic Concurrency Control.
            
            Works with CosmosDbRepository and TableStorageRepository (and BlobStorageRepository?)
            </summary>
        </member>
        <member name="M:ITDS.Core.Repository.Helpers.ConcurrencyHelper.Invoke``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task},``0,System.Action{ITDS.Core.Repository.Exceptions.RepositoryOperationException,System.Int32},System.Int32)">
            <summary>
            This method performs a task and will reperform it if a ConcurrentModificationException occurs
            </summary>
            <typeparam name="E">The type of the value to retrieve/update</typeparam>
            <param name="valueRetriever">A function that (re)retrieves a value from the database, called each time a concurrent modification exception occurs.</param>
            <param name="taskPerformer">Tasks to perform, will be re-performed if a concurrent exception occurs. Should perform the database update.</param>
            <param name="initialValue">Optionally supply an initial value if it has already been retrieved from the database.</param>
            <param name="logger">Will be called each time a concurrent exception occurs.</param>
            <param name="maxAttempts">Maximum number of attempts to perform.</param>
            <returns>The value retrieved from the database.</returns>
        </member>
        <member name="M:ITDS.Core.Repository.Helpers.ConcurrencyHelper.Invoke``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task},``0,System.Action{ITDS.Core.Repository.Exceptions.RepositoryOperationException,System.Int32},System.Int32)">
            <summary>
            This method performs a task and will reperform it if a ConcurrentModificationException occurs
            </summary>
            <typeparam name="E">The type of the value to retrieve/update</typeparam>
            <param name="valueRetriever">A function that (re)retrieves a value from the database, called each time a concurrent modification exception occurs.</param>
            <param name="taskPerformer">Tasks to perform, will be re-performed if a concurrent exception occurs. Should perform the database update. Will receive as a parameter the number of attempts that has been made,</param>
            <param name="initialValue">Optionally supply an initial value if it has already been retrieved from the database.</param>
            <param name="logger">Will be called each time a concurrent exception occurs.</param>
            <param name="maxAttempts">Maximum number of attempts to perform.</param>
            <returns>The value retrieved from the database.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ITDS.Core.Repository.Helpers.ExpressionHelper" -->
        <member name="T:ITDS.Core.Repository.TableStorage.AbstractTableEntity">
            <summary>
            Why use this instead of regular TableEntity? Well, to remove dependency on the entire WindowsAzure.Storage nuget package.
            We could remove dependency on this class also but then we would need some other way of specifying PartitionKey, RowKey and ETag.
            </summary>
        </member>
        <member name="M:ITDS.Core.Repository.TableStorage.ITableStorageRepository`1.Insert(`0)">
            <summary>
            Use this instead of Upsert if you need optimistic concurrency
            </summary>
        </member>
        <member name="M:ITDS.Core.Repository.TableStorage.ITableStorageRepository`1.Update(`0)">
            <summary>
            Use this instead of Upsert if you need optimistic concurrency
            </summary>
        </member>
    </members>
</doc>
