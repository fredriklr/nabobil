<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ITDS.Core.CosmosDb</name>
    </assembly>
    <members>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepository`1.Exists``1(System.String,System.String)">
            <summary>
            Checks whether a document exists by fetching it by ID from the database
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepository`1.GetFirstAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Fetches the first document that matches 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepository`1.DeleteAsync(System.String,System.String)">
            <summary>
            Deletes a document from the database
            </summary>
            <param name="id">The id of the document</param>
            <exception cref="T:ITDS.Core.Repository.Exceptions.RepositoryOperationException">Thrown when document is not found</exception> 
            <returns>An awaitable task</returns>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepository`1.SetProvisionedRU(System.Int32)">
            <summary>
            
            </summary>
            <param name="requestUnit"></param>
            /// <exception cref="T:ITDS.Core.Repository.Exceptions.RepositoryOperationException">Thrown when document is not found</exception> 
            <returns></returns>
        </member>
        <member name="T:ITDS.Core.CosmosDb.CosmosDbRepositoryFactory">
            <summary>
            Use this class to create an instance of CosmosDbRepository
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepositoryFactory.Create``1(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Newtonsoft.Json.JsonSerializerSettings,System.Nullable{System.Int32},System.Boolean,System.String,System.Boolean,System.Int32,System.Collections.Generic.List{ITDS.Core.CosmosDb.IndexProperties},System.Collections.Generic.List{System.String},System.Collections.Generic.List{ITDS.Core.CosmosDb.UniqueKeys},ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger)">
            <summary>
            Create a cosmos db repo.
            </summary>
            <typeparam name="TypeForDI">Type used for dependency injection (also used as default collection name, if none are specified)</typeparam>
            <param name="uri">Uri to the db, format: https://elkds-dev-yourservice-cdb.documents.azure.com:443</param>
            <param name="authKey">The db's auth key, format: f4SfX9J8P9d02ppZiwcKnZilongasskey3cZxcdpHcWoX23GhJDxGVvFMYIbmAL1XlpQUJj50ffg==</param>
            <param name="dbName">The name of the database(not db-account), format: MyAwesomeDb</param>
            <param name="collName">The name of the collection, default name of type. Format: MyAwesomeCollection</param>
            <param name="retries">(Optional) The number of retries when a request is throttled</param>
            <param name="retryWaitTime">(Optional) The wait time when a retry is throttled</param>
            <param name="serializerSettings">(Optional) The serializer used for (de)serializing the documents</param>
            <param name="maxConnectionLimit">(Optional) Maximum number of concurrent connections to the db</param>
            <param name="isPartitioned">(Optional) Whether the db is partitioned</param>
            <param name="partitionKeyPath">(Optional) The path to the property used as partition key</param>
            <param name="isMultiregion">(Optional) Whether the db is located in multiple regions</param>
            <param name="provisionRU">(Optional) The collection will be created with this number of RU</param>
            <param name="indexProperties">(Optional) A list of paths to index (and their type)</param>
            <param name="excludedIndices">(Optional) A list of paths to exlude from the index</param>
            /// <param name="NeedBulkInserts">(Optional) If there is need for the service to handle bulkinsert and let SDK handle all performance settings</param>
            <returns></returns>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepositoryFactory.CreateFromConfiguration``2(``1)">
            <summary>
            Create a cosmosDb repo from a configuration
            </summary>
            <typeparam name="TypeForDI">Type used for dependency injection (also used as default collection name, if none are specified)</typeparam>
            <typeparam name="E">Config type</typeparam>
            <param name="config">Config with parameters for cosmos db</param>
            <returns></returns>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepositoryFactory.CreateFromConnectionString``1(System.String,System.Collections.Generic.List{ITDS.Core.CosmosDb.IndexProperties},System.Collections.Generic.List{System.String},Newtonsoft.Json.JsonSerializerSettings,System.Collections.Generic.List{ITDS.Core.CosmosDb.UniqueKeys},ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger)">
            <summary>
            Creates a cosmos db repository from a connection string.
            Possible values in connection string are:
            DatabaseName={string};Uri={uri};AuthorizationKey={string};CollectionName=[string];MaxRetryAttemptsOnThrottledRequests=[int];MaxRetryWaitTimeInSeconds=[int];
            IsPartitioned=[bool];IsMultiregion=[bool];PartitionKey=[string];MaxConnectionLimit=[int];ProvisionRU=[int]
            
            Minimal example:
            DatabaseName={string};Uri={uri};AuthorizationKey={string};
            
            </summary>
            <typeparam name="TypeForDI">Type used for dependency injection (also used as default collection name, if none are specified)</typeparam>
            <param name="connectionString"></param>
            <param name="indexProperties">(Optional) A list of paths to index (and their type)</param>
            <param name="excludedIndices">(Optional) A list of paths to exlude from the index</param>
            <param name="serializerSettings">(Optional) The serializer used for (de)serializing the documents</param>
            <returns></returns>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepositoryFactory.CreateByConvention``1(System.String,System.Collections.Generic.List{ITDS.Core.CosmosDb.IndexProperties},System.Collections.Generic.List{System.String},Newtonsoft.Json.JsonSerializerSettings,System.Collections.Generic.List{ITDS.Core.CosmosDb.UniqueKeys},ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger)">
            <summary>
            Creates a cosmos db repository from a connection string, the connection string is retrieved by using the dbName like so:
                CosmosDb.{dbName}.ConnectionString
                
            Possible values in connection string are:
            DatabaseName={string};Uri={uri};AuthorizationKey={string};CollectionName=[string];MaxRetryAttemptsOnThrottledRequests=[int];MaxRetryWaitTimeInSeconds=[int];
            IsPartitioned=[bool];IsMultiregion=[bool];PartitionKey=[string];MaxConnectionLimit=[int];ProvisionRU=[int]
            
            Minimal example:
            DatabaseName={string};Uri={uri};AuthorizationKey={string};
            
            </summary>
            <typeparam name="TypeForDI">Type used for dependency injection (also used as default collection name, if none are specified)</typeparam>
            <param name="dbName">Name for config lookup</param>
            <param name="indexProperties">(Optional) A list of paths to index (and their type)</param>
            <param name="excludedIndices">(Optional) A list of paths to exlude from the index</param>
            <param name="serializerSettings">(Optional) The serializer used for (de)serializing the documents</param>
            <param name="uniqueKeys">(Optional) a list of unique key-paths within document</param>
            <param name="deleteAllDocumentInCollectionAfterSec">(Optional) a list of unique key-paths within document</param>
            <returns></returns>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepositoryFactory.FetchAndParseIndexProperties(System.String)">
            <summary>
            Parses a list of values from a web or app config. And creates a list of IndexProperties.
            
            Format:
                [Number|String|Point|LineString|Polygon,Range|Hash|Spatial:{Precision}]{PropertyPath}
                
            Example:
                [Number,Range:10]/props/*
                
            Specify multiple indices like this:
                name=YourAwesomeIndexProperty-0 value=[Number,Range:10]/props/*
                name=YourAwesomeIndexProperty-1 value=[String,Range:10]/props/*/stuff
                name=YourAwesomeIndexProperty-2 value=[Number,Range]/props/[]/things
                
            For more see https://docs.microsoft.com/en-us/azure/cosmos-db/indexing-policies
            </summary>
            <param name="settingsName">Name of setting</param>
            <returns></returns>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepositoryFactory.FetchAndParseExcludedIndexPaths(System.String)">
            <summary>
            Fetches a list of index paths to exclude.
            
            Format:
            {settingsName}-{n}
            
            Use 1 setting per index and n must start at 0.
            
            Example:
            
             To exclude all paths use: /
                name=YourAwesomeIndexProperty-0 value=/
                
             To exclude a property at root level: /{propertyName}/?
                name=YourAwesomeIndexProperty-0 value=/{address}/?
                name=YourAwesomeIndexProperty-1 value=/{email}/?
             
            For more see https://docs.microsoft.com/en-us/azure/cosmos-db/indexing-policies
            </summary>
            <param name="settingsName">Name of setting</param>
            <returns></returns>
        </member>
        <member name="M:ITDS.Core.CosmosDb.CosmosDbRepositoryFactory.FetchAndParseUniqueKeys(System.String)">
            <summary>
            Parses a list of values from a web or app config. And creates a list of uniqueKeys.
            
            Format:
                Composite Uniqueue Keys:
                /firstName|/lastName|/email
                /address/street
                
            Example:
                /firstName|/lastName|/email
                /address/street
                
            Specify multiple indices like this:
                name=YourUniqueKey-0 value=/firstName|/lastName|/email
                name=YourUniqueKey-1 value=/address/street
                
            </summary>
            <param name="settingsName"></param>
            <returns></returns>
        </member>
        <member name="P:ITDS.Core.CosmosDb.IndexProperties.DocumentPath">
            <summary>
            OBS! If you need same path with two different type of indexes (Range + Hash) you create two Indexproperties with same DocumentPath
            DocumentPath can be used as:
            /prop/? Exact match to /prop
            /prop/* Index all prop underlying paths (including /prop SELECT FROM collection c WHERE c.prop.subprop.nextprop = "value"  SELECT FROM collection c ORDER BY c.prop
            /prop/[]?  SELECT tag FROM tag IN collection.props WHERE tag = "value"   SELECT tag FROM collection c JOIN tag IN c.props WHERE tag > 5
            /props/[]/subprop/?  SELECT tag FROM tag IN collection.props WHERE tag.subprop = "value"  SELECT tag FROM collection c JOIN tag IN c.props WHERE tag.subprop = "value"
            /prop/subprop/? SELECT FROM collection c WHERE c.prop.subprop = "value"
            "SELECT * FROM orders o WHERE o.region >= 'U'"   // the equivalent of LIKE 'U%' (is >= 'U' AND "lessthan arrow" 'U')
            </summary>
        </member>
        <member name="T:ITDS.Core.CosmosDb.Diagnostics.CosmosDbEventSourceLogger">
            <summary>
            <see cref="T:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger"/>
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.CosmosDbEventSourceLogger.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{Microsoft.Azure.Documents.Client.DocumentResponse{``0}}},System.String)">
            <summary>
            <see cref="M:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{Microsoft.Azure.Documents.Client.DocumentResponse{``0}}},System.String)"/>
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.CosmosDbEventSourceLogger.LogCall(ITDS.Core.CosmosDb.Diagnostics.CosmosEventMetadata)">
            <summary>
            <see cref="M:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger.LogCall(ITDS.Core.CosmosDb.Diagnostics.CosmosEventMetadata)"/>
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.CosmosDbEventSourceLogger.LogInitialization(ITDS.Core.CosmosDb.DefaultCosmosDbConfiguration)">
            <summary>
            <see cref="M:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger.LogInitialization(ITDS.Core.CosmosDb.DefaultCosmosDbConfiguration)"/>
            </summary>
        </member>
        <member name="T:ITDS.Core.CosmosDb.Diagnostics.CosmosDbMetricNullLogger">
            <summary>
            <see cref="T:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger"/>
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.CosmosDbMetricNullLogger.LogCall(ITDS.Core.CosmosDb.Diagnostics.CosmosEventMetadata)">
            
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.CosmosDbMetricNullLogger.LogInitialization(ITDS.Core.CosmosDb.DefaultCosmosDbConfiguration)">
            
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.CosmosDbMetricNullLogger.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{Microsoft.Azure.Documents.Client.DocumentResponse{``0}}},System.String)">
            
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.CosmosDbMetricNullLogger.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{Microsoft.Azure.Documents.Client.FeedResponse{``0}}},System.String)">
            
        </member>
        <member name="T:ITDS.Core.CosmosDb.Diagnostics.CosmosEventMetadata">
            <summary>
            Represents metadata around a cosmosDb-call
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.CosmosEventMetadata.#ctor">
            
        </member>
        <member name="T:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger">
            <summary>
            Logs request metadata for cosmosDb calls.
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger.LogInitialization(ITDS.Core.CosmosDb.DefaultCosmosDbConfiguration)">
            <summary>
            Logs startup configuration
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger.LogCall(ITDS.Core.CosmosDb.Diagnostics.CosmosEventMetadata)">
            <summary>
            Logs a call to cosmosDb
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{Microsoft.Azure.Documents.Client.DocumentResponse{``0}}},System.String)">
            <summary>
            Invokes a call and logs metadata from that call to cosmosDb
            </summary>
        </member>
        <member name="M:ITDS.Core.CosmosDb.Diagnostics.ICosmosDbMetricLogger.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{Microsoft.Azure.Documents.Client.FeedResponse{``0}}},System.String)">
            <summary>
            Invokes a call and logs metadata from that call to cosmosDb
            </summary>
        </member>
    </members>
</doc>
